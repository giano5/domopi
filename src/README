INSTALLAZIONE

sudo make install


DEMONE GESTIONE

Avviare come

sudo /usr/local/bin/domod.sh


CONFIGURAZIONE:

Utilizzare programma:

sudo ./test.sh



API : SVILUPPO e TEST

Caricare da cartella repository:

. domopi.functions


Saranno disponibili i comandi

domopi_help
domopi_man

per guidarvi alle fasi successive.

Attuale interfaccia disponibile:

	domopi_create()
	domopi_destroy()
	domopi_fetch()
	domopi_get_description()
	domopi_get_groups()
	domopi_get_patch()
	domopi_get_sensors_of_group()
	domopi_get_state()
	domopi_get_type()
	domopi_get_wiredpi()
	domopi_group_add_sensor()
	domopi_group_remove_sensor()
	domopi_help()
	domopi_ident()
	domopi_init()
	domopi_install()
	domopi_list()
	domopi_man()
	domopi_modify()
	domopi_poweron()
	domopi_reset()
	domopi_select()
	domopi_set_state()
	domopi_shutdown()
	domopi_show_hardware()

PER UN ESEMPIO VEDERE:
test.sh


DESCRIZIONE

La DOMOPI API è intesa per realizzare i seguenti obiettivi.
1. Offrire un unico insieme di funzioni per la manipolazione 
   di files di configurazione generici. [PARTE PRIVATA]
2. Implementare specifiche operazioni su oggetti utili al progetto
   DOMOPI appoggiandosi a file di configurazione predefiniti [PARTE PUBBLICA]


I file di configurazione sono di tipo tabellare con delimitatore di campo due punti (:) e delimitatore di riga ritorno carrello (\n).
Sono ammessi commenti intera riga (introdotti da carattere #).

I files di configurazione sono gestiti grazie alla presenza al loro interno di una dichiarazione di struttura (schema) impostata dalla libreria al momento della creazione del file in un commento.
Le prime dire righe nella strutturadel file sono commenti gestiti dalla libreria: non modificarli manualmente.

Attualmente la libreria conosce solo il seguente schema:

DOMOPI_FILE_SCHEMA['global']='# groupID:deviceID:sensorID:patchin:patchout:wiredpi:type:mode:maxexecutiontime:order:defaultstate:currentstate:descriptionU:alias:groups'

utilizzato nel file di configurazione global.cfg per la definizione della maggiorparte degli oggetti necessari al progetto.

La libreria agisce solo in ragione dello schema presente nel file, quindi
eventuali cambiamenti nello schema non necessitano della manipolazione della
libreria se non nella procedura di creazione del file (ovvero portare la nuova definizione dello schema). Quindi la libreria è sempre retro-compatibile nelle funzioni di gestione del file.
Ovviamente potrebbero non esserlo le funzioni evolute.

CRUD

Le funzioni primitive di accesso ai file di configurazione implementano
una interfaccia CRUD (Create Read Update Delete).

I parametri delle funzioni hanno le seguenti convenzioni:
 - coppie nome:valore indicano attributo e valore da impostare (create/update)
 - coppie nome=valore indicano attributo da cercare (update/read/delete)
	- valore può essere una lista separata da pipe (|)
 - nome  indica attributo da visualizzare (read)
